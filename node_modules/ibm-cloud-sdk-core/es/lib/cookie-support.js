/**
 * (C) Copyright IBM Corp. 2022.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import extend from 'extend';
import { CookieJar } from 'tough-cookie';
import logger from './logger';
export class CookieInterceptor {
    constructor(cookieJar) {
        if (cookieJar) {
            if (cookieJar === true) {
                logger.debug('CookieInterceptor: creating new CookieJar');
                this.cookieJar = new CookieJar();
            }
            else {
                logger.debug('CookieInterceptor: using supplied CookieJar');
                this.cookieJar = cookieJar;
            }
        }
        else {
            throw new Error('Must supply a cookie jar or true.');
        }
    }
    requestInterceptor(config) {
        return __awaiter(this, void 0, void 0, function* () {
            logger.debug('CookieInterceptor: intercepting request');
            if (config && config.url) {
                logger.debug(`CookieInterceptor: getting cookies for: ${config.url}`);
                const cookieHeaderValue = yield this.cookieJar.getCookieString(config.url);
                if (cookieHeaderValue) {
                    logger.debug('CookieInterceptor: setting cookie header');
                    const cookieHeader = { cookie: cookieHeaderValue };
                    config.headers = extend(true, {}, config.headers, cookieHeader);
                }
                else {
                    logger.debug(`CookieInterceptor: no cookies for: ${config.url}`);
                }
            }
            else {
                logger.debug('CookieInterceptor: no request URL.');
            }
            return config;
        });
    }
    responseInterceptor(response) {
        return __awaiter(this, void 0, void 0, function* () {
            logger.debug('CookieInterceptor: intercepting response.');
            if (response && response.headers) {
                logger.debug('CookieInterceptor: checking for set-cookie headers.');
                const cookies = response.headers['set-cookie'];
                if (cookies) {
                    logger.debug(`CookieInterceptor: setting cookies in jar for URL ${response.config.url}.`);
                    // Write cookies sequentially by chaining the promises in a reduce
                    yield cookies.reduce((cookiePromise, cookie) => cookiePromise.then(() => this.cookieJar.setCookie(cookie, response.config.url)), Promise.resolve(null));
                }
                else {
                    logger.debug('CookieInterceptor: no set-cookie headers.');
                }
            }
            else {
                logger.debug('CookieInterceptor: no response headers.');
            }
            return response;
        });
    }
}
