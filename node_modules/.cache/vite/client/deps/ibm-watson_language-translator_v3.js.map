{
  "version": 3,
  "sources": ["../../../../ibm-watson/package.json", "../../../../ibm-watson/lib/common.js", "../../../../ibm-watson/language-translator/v3.js"],
  "sourcesContent": ["{\n  \"name\": \"ibm-watson\",\n  \"version\": \"8.0.0\",\n  \"description\": \"Client library to use the IBM Watson Services\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/watson-developer-cloud/node-sdk.git\"\n  },\n  \"keywords\": [\n    \"assistant\",\n    \"compare comply\",\n    \"discovery\",\n    \"ibm\",\n    \"natural language classifier\",\n    \"natural language understanding\",\n    \"personality insights\",\n    \"speech to text\",\n    \"text to speech\",\n    \"tone analyzer\",\n    \"tone_analyzer\",\n    \"visual recognition\",\n    \"watson developer cloud\",\n    \"watson\",\n    \"wdc\"\n  ],\n  \"author\": \"IBM Corp.\",\n  \"contributors\": [\n    {\n      \"name\": \"German Attanasio Ruiz\",\n      \"email\": \"germanatt@us.ibm.com\"\n    },\n    {\n      \"name\": \"Nathan Friedly\",\n      \"email\": \"nfriedly@us.ibm.com\"\n    },\n    {\n      \"name\": \"Jeff Stylos\",\n      \"email\": \"jsstylos@us.ibm.com\"\n    },\n    {\n      \"name\": \"Dustin Popp\",\n      \"email\": \"dustinpopp@ibm.com\"\n    },\n    {\n      \"name\": \"Angelo Paparazzi\",\n      \"email\": \"angelo.paparazzi@ibm.com\"\n    }\n  ],\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/watson-developer-cloud/node-sdk/issues\"\n  },\n  \"dependencies\": {\n    \"@types/async\": \"^3.2.5\",\n    \"@types/extend\": \"^3.0.1\",\n    \"@types/isstream\": \"^0.1.0\",\n    \"@types/node\": \"^13.13.39\",\n    \"@types/websocket\": \"^1.0.1\",\n    \"async\": \"^3.2.0\",\n    \"camelcase\": \"^6.2.0\",\n    \"extend\": \"~3.0.2\",\n    \"ibm-cloud-sdk-core\": \"^4.0.3\",\n    \"isstream\": \"~0.1.2\",\n    \"websocket\": \"^1.0.33\"\n  },\n  \"engines\": {\n    \"node\": \">=16.0.0\"\n  },\n  \"scripts\": {\n    \"tslint:config\": \"tslint-config-prettier-check ./tslint.json\",\n    \"tslint:fix\": \"tslint --fix -p . -c tslint.json\",\n    \"tslint:check\": \"tslint -p . -c ./tslint.json\",\n    \"eslint:config\": \"eslint --print-config .eslintrc.js | eslint-config-prettier-check\",\n    \"eslint:fix\": \"eslint . --fix\",\n    \"eslint:check\": \"eslint . --cache\",\n    \"lint\": \"npm run eslint:check && npm run tslint:check\",\n    \"build\": \"tsc && cp package.json dist/\",\n    \"doc\": \"jsdoc -c scripts/jsdoc/config.json\",\n    \"tsc-publish-dry\": \"tsc-publish --no-checks --dry-run\",\n    \"postversion\": \"npm run tsc-publish-dry\",\n    \"test-integration\": \"jest test/integration\",\n    \"test-unit\": \"jest test/unit/\",\n    \"test\": \"jest test/\",\n    \"test-unit-travis\": \"jest --silent --runInBand test/unit/\",\n    \"test-integration-travis\": \"jest --silent --runInBand --no-colors --testNamePattern='^((?!@slow).)*$' --json test/integration > test-output.log\",\n    \"report-coverage\": \"codecov\",\n    \"watch-doc\": \"nodemon --watch ./ --ext js,tmpl,json --ignore dist/ --ignore doc/ --ignore test/ --ignore examples/ --exec npm run doc\",\n    \"watch\": \"npm run test-unit -- --watch\",\n    \"check-packages\": \"installed-check -e -d\",\n    \"snyk-protect\": \"snyk protect\",\n    \"prettier\": \"prettier --write \\\"{src,test}/**/*.js\\\"\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\"\n    }\n  },\n  \"jest\": {\n    \"collectCoverage\": true,\n    \"coverageDirectory\": \"./coverage/\",\n    \"testEnvironment\": \"node\"\n  },\n  \"commitlint\": {\n    \"rules\": {\n      \"body-leading-blank\": [\n        1,\n        \"always\"\n      ],\n      \"footer-leading-blank\": [\n        1,\n        \"always\"\n      ],\n      \"header-max-length\": [\n        2,\n        \"always\",\n        72\n      ],\n      \"scope-case\": [\n        2,\n        \"always\",\n        \"lower-case\"\n      ],\n      \"subject-case\": [\n        2,\n        \"never\",\n        [\n          \"sentence-case\",\n          \"start-case\",\n          \"pascal-case\",\n          \"upper-case\"\n        ]\n      ],\n      \"subject-empty\": [\n        2,\n        \"never\"\n      ],\n      \"subject-full-stop\": [\n        2,\n        \"never\",\n        \".\"\n      ],\n      \"type-case\": [\n        2,\n        \"always\",\n        \"lower-case\"\n      ],\n      \"type-empty\": [\n        2,\n        \"never\"\n      ],\n      \"type-enum\": [\n        2,\n        \"always\",\n        [\n          \"build\",\n          \"chore\",\n          \"ci\",\n          \"docs\",\n          \"feat\",\n          \"fix\",\n          \"perf\",\n          \"refactor\",\n          \"revert\",\n          \"style\",\n          \"test\"\n        ]\n      ]\n    }\n  },\n  \"snyk\": true,\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"./node_modules/cz-conventional-changelog\"\n    }\n  }\n}", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSdkHeaders = void 0;\nvar os = require(\"os\");\n// tslint:disable-next-line:no-var-requires\nvar pkg = require('../package.json');\nfunction getSdkHeaders(serviceName, serviceVersion, operationId) {\n    // disable analytics headers in the browser - they cause cors issues\n    var isBrowser = typeof window !== 'undefined';\n    if (isBrowser) {\n        return {};\n    }\n    var sdkName = 'watson-apis-node-sdk';\n    var sdkVersion = pkg.version;\n    var osName = os.platform();\n    var osVersion = os.release();\n    var nodeVersion = process.version;\n    // note - all node methods are asynchronous, 'async' will always be true\n    var headers = {\n        'User-Agent': \"\".concat(sdkName, \"-\").concat(sdkVersion, \" \").concat(osName, \" \").concat(osVersion, \" \").concat(nodeVersion),\n        'X-IBMCloud-SDK-Analytics': \"service_name=\".concat(serviceName, \";service_version=\").concat(serviceVersion, \";operation_id=\").concat(operationId, \";async=true\"),\n    };\n    return headers;\n}\nexports.getSdkHeaders = getSdkHeaders;\n", "\"use strict\";\n/**\n * (C) Copyright IBM Corp. 2018, 2023.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n/**\n * IBM OpenAPI SDK Code Generator Version: 3.64.1-cee95189-20230124-211647\n */\nvar extend = require(\"extend\");\nvar ibm_cloud_sdk_core_1 = require(\"ibm-cloud-sdk-core\");\nvar common_1 = require(\"../lib/common\");\n/**\n * IBM Watson&trade; Language Translator translates text from one language to another. The service offers multiple\n * IBM-provided translation models that you can customize based on your unique terminology and language. Use Language\n * Translator to take news from across the globe and present it in your language, communicate with your customers in\n * their own language, and more.\n *\n * API Version: 3.0.0\n * See: https://cloud.ibm.com/docs/language-translator\n */\nvar LanguageTranslatorV3 = /** @class */ (function (_super) {\n    __extends(LanguageTranslatorV3, _super);\n    /**\n     * Construct a LanguageTranslatorV3 object.\n     *\n     * @param {Object} options - Options for the service.\n     * @param {string} options.version - Release date of the version of the API you want to use. Specify dates in\n     * YYYY-MM-DD format. The current version is `2018-05-01`.\n     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.\n     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.\n     * @param {string} [options.serviceName] - The name of the service to configure\n     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set\n     * @constructor\n     * @returns {LanguageTranslatorV3}\n     */\n    function LanguageTranslatorV3(options) {\n        var _this = this;\n        options = options || {};\n        var _requiredParams = ['version'];\n        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(options, _requiredParams, null);\n        if (_validationErrors) {\n            throw _validationErrors;\n        }\n        if (!options.serviceName) {\n            options.serviceName = LanguageTranslatorV3.DEFAULT_SERVICE_NAME;\n        }\n        // If the caller didn't supply an authenticator, construct one from external configuration.\n        if (!options.authenticator) {\n            options.authenticator = (0, ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment)(options.serviceName);\n        }\n        _this = _super.call(this, options) || this;\n        _this.configureService(options.serviceName);\n        if (options.serviceUrl) {\n            _this.setServiceUrl(options.serviceUrl);\n        }\n        _this.version = options.version;\n        return _this;\n    }\n    /*************************\n     * languages\n     ************************/\n    /**\n     * List supported languages.\n     *\n     * Lists all supported languages for translation. The method returns an array of supported languages with information\n     * about each language. Languages are listed in alphabetical order by language code (for example, `af`, `ar`). In\n     * addition to basic information about each language, the response indicates whether the language is\n     * `supported_as_source` for translation and `supported_as_target` for translation. It also lists whether the language\n     * is `identifiable`.\n     *\n     * @param {Object} [params] - The parameters to send to the service.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.Languages>>}\n     */\n    LanguageTranslatorV3.prototype.listLanguages = function (params) {\n        var _params = __assign({}, params);\n        var _requiredParams = [];\n        var _validParams = ['headers'];\n        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);\n        if (_validationErrors) {\n            return Promise.reject(_validationErrors);\n        }\n        var query = {\n            'version': this.version,\n        };\n        var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'listLanguages');\n        var parameters = {\n            options: {\n                url: '/v3/languages',\n                method: 'GET',\n                qs: query,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    /*************************\n     * translation\n     ************************/\n    /**\n     * Translate.\n     *\n     * Translates the input text from the source language to the target language. Specify a model ID that indicates the\n     * source and target languages, or specify the source and target languages individually. You can omit the source\n     * language to have the service attempt to detect the language from the input text. If you omit the source language,\n     * the request must contain sufficient input text for the service to identify the source language.\n     *\n     * You can translate a maximum of 50 KB (51,200 bytes) of text with a single request. All input text must be encoded\n     * in UTF-8 format.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string[]} params.text - Input text in UTF-8 encoding. Submit a maximum of 50 KB (51,200 bytes) of text with\n     * a single request. Multiple elements result in multiple translations in the response.\n     * @param {string} [params.modelId] - The model to use for translation. For example, `en-de` selects the IBM-provided\n     * base model for English-to-German translation. A model ID overrides the `source` and `target` parameters and is\n     * required if you use a custom model. If no model ID is specified, you must specify at least a target language.\n     * @param {string} [params.source] - Language code that specifies the language of the input text. If omitted, the\n     * service derives the source language from the input text. The input must contain sufficient text for the service to\n     * identify the language reliably.\n     * @param {string} [params.target] - Language code that specifies the target language for translation. Required if\n     * model ID is not specified.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationResult>>}\n     */\n    LanguageTranslatorV3.prototype.translate = function (params) {\n        var _params = __assign({}, params);\n        var _requiredParams = ['text'];\n        var _validParams = ['text', 'modelId', 'source', 'target', 'headers'];\n        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);\n        if (_validationErrors) {\n            return Promise.reject(_validationErrors);\n        }\n        var body = {\n            'text': _params.text,\n            'model_id': _params.modelId,\n            'source': _params.source,\n            'target': _params.target,\n        };\n        var query = {\n            'version': this.version,\n        };\n        var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'translate');\n        var parameters = {\n            options: {\n                url: '/v3/translate',\n                method: 'POST',\n                body: body,\n                qs: query,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    /*************************\n     * identification\n     ************************/\n    /**\n     * List identifiable languages.\n     *\n     * Lists the languages that the service can identify. Returns the language code (for example, `en` for English or `es`\n     * for Spanish) and name of each language.\n     *\n     * @param {Object} [params] - The parameters to send to the service.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.IdentifiableLanguages>>}\n     */\n    LanguageTranslatorV3.prototype.listIdentifiableLanguages = function (params) {\n        var _params = __assign({}, params);\n        var _requiredParams = [];\n        var _validParams = ['headers'];\n        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);\n        if (_validationErrors) {\n            return Promise.reject(_validationErrors);\n        }\n        var query = {\n            'version': this.version,\n        };\n        var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'listIdentifiableLanguages');\n        var parameters = {\n            options: {\n                url: '/v3/identifiable_languages',\n                method: 'GET',\n                qs: query,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    /**\n     * Identify language.\n     *\n     * Identifies the language of the input text.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.text - Input text in UTF-8 format.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.IdentifiedLanguages>>}\n     */\n    LanguageTranslatorV3.prototype.identify = function (params) {\n        var _params = __assign({}, params);\n        var _requiredParams = ['text'];\n        var _validParams = ['text', 'headers'];\n        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);\n        if (_validationErrors) {\n            return Promise.reject(_validationErrors);\n        }\n        var body = _params.text;\n        var query = {\n            'version': this.version,\n        };\n        var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'identify');\n        var parameters = {\n            options: {\n                url: '/v3/identify',\n                method: 'POST',\n                body: body,\n                qs: query,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'Content-Type': 'text/plain',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    /*************************\n     * models\n     ************************/\n    /**\n     * List models.\n     *\n     * Lists available translation models.\n     *\n     * @param {Object} [params] - The parameters to send to the service.\n     * @param {string} [params.source] - Specify a language code to filter results by source language.\n     * @param {string} [params.target] - Specify a language code to filter results by target language.\n     * @param {boolean} [params._default] - If the `default` parameter isn't specified, the service returns all models\n     * (default and non-default) for each language pair. To return only default models, set this parameter to `true`. To\n     * return only non-default models, set this parameter to `false`. There is exactly one default model, the IBM-provided\n     * base model, per language pair.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationModels>>}\n     */\n    LanguageTranslatorV3.prototype.listModels = function (params) {\n        var _params = __assign({}, params);\n        var _requiredParams = [];\n        var _validParams = ['source', 'target', '_default', 'headers'];\n        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);\n        if (_validationErrors) {\n            return Promise.reject(_validationErrors);\n        }\n        var query = {\n            'version': this.version,\n            'source': _params.source,\n            'target': _params.target,\n            'default': _params._default,\n        };\n        var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'listModels');\n        var parameters = {\n            options: {\n                url: '/v3/models',\n                method: 'GET',\n                qs: query,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    /**\n     * Create model.\n     *\n     * Uploads training files to customize a translation model. You can customize a model with a forced glossary or with a\n     * parallel corpus:\n     * * Use a *forced glossary* to force certain terms and phrases to be translated in a specific way. You can upload\n     * only a single forced glossary file for a model. The size of a forced glossary file for a custom model is limited to\n     * 10 MB.\n     * * Use a *parallel corpus* when you want your custom model to learn from general translation patterns in parallel\n     * sentences in your samples. What your model learns from a parallel corpus can improve translation results for input\n     * text that the model has not been trained on. You can upload multiple parallel corpora files with a request. To\n     * successfully train with parallel corpora, the corpora files must contain a cumulative total of at least 5000\n     * parallel sentences. The cumulative size of all uploaded corpus files for a custom model is limited to 250 MB.\n     *\n     * Depending on the type of customization and the size of the uploaded files, training time can range from minutes for\n     * a glossary to several hours for a large parallel corpus. To create a model that is customized with a parallel\n     * corpus and a forced glossary, customize the model with a parallel corpus first and then customize the resulting\n     * model with a forced glossary.\n     *\n     * You can create a maximum of 10 custom models per language pair. For more information about customizing a\n     * translation model, including the formatting and character restrictions for data files, see [Customizing your\n     * model](https://cloud.ibm.com/docs/language-translator?topic=language-translator-customizing).\n     *\n     * #### Supported file formats\n     *\n     *  You can provide your training data for customization in the following document formats:\n     * * **TMX** (`.tmx`) - Translation Memory eXchange (TMX) is an XML specification for the exchange of translation\n     * memories.\n     * * **XLIFF** (`.xliff`) - XML Localization Interchange File Format (XLIFF) is an XML specification for the exchange\n     * of translation memories.\n     * * **CSV** (`.csv`) - Comma-separated values (CSV) file with two columns for aligned sentences and phrases. The\n     * first row must have two language codes. The first column is for the source language code, and the second column is\n     * for the target language code.\n     * * **TSV** (`.tsv` or `.tab`) - Tab-separated values (TSV) file with two columns for aligned sentences and phrases.\n     * The first row must have two language codes. The first column is for the source language code, and the second column\n     * is for the target language code.\n     * * **JSON** (`.json`) - Custom JSON format for specifying aligned sentences and phrases.\n     * * **Microsoft Excel** (`.xls` or `.xlsx`) - Excel file with the first two columns for aligned sentences and\n     * phrases. The first row contains the language code.\n     *\n     * You must encode all text data in UTF-8 format. For more information, see [Supported document formats for training\n     * data](https://cloud.ibm.com/docs/language-translator?topic=language-translator-customizing#supported-document-formats-for-training-data).\n     *\n     *\n     * #### Specifying file formats\n     *\n     *  You can indicate the format of a file by including the file extension with the file name. Use the file extensions\n     * shown in **Supported file formats**.\n     *\n     * Alternatively, you can omit the file extension and specify one of the following `content-type` specifications for\n     * the file:\n     * * **TMX** - `application/x-tmx+xml`\n     * * **XLIFF** - `application/xliff+xml`\n     * * **CSV** - `text/csv`\n     * * **TSV** - `text/tab-separated-values`\n     * * **JSON** - `application/json`\n     * * **Microsoft Excel** - `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`\n     *\n     * For example, with `curl`, use the following `content-type` specification to indicate the format of a CSV file named\n     * **glossary**:\n     *\n     * `--form \"forced_glossary=@glossary;type=text/csv\"`.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.baseModelId - The ID of the translation model to use as the base for customization. To see\n     * available models and IDs, use the `List models` method. Most models that are provided with the service are\n     * customizable. In addition, all models that you create with parallel corpora customization can be further customized\n     * with a forced glossary.\n     * @param {NodeJS.ReadableStream | Buffer} [params.forcedGlossary] - A file with forced glossary terms for the source\n     * and target languages. The customizations in the file completely overwrite the domain translation data, including\n     * high frequency or high confidence phrase translations.\n     *\n     * You can upload only one glossary file for a custom model, and the glossary can have a maximum size of 10 MB. A\n     * forced glossary must contain single words or short phrases. For more information, see **Supported file formats** in\n     * the method description.\n     *\n     * *With `curl`, use `--form forced_glossary=@{filename}`.*.\n     * @param {string} [params.forcedGlossaryContentType] - The content type of forcedGlossary.\n     * @param {NodeJS.ReadableStream | Buffer} [params.parallelCorpus] - A file with parallel sentences for the source and\n     * target languages. You can upload multiple parallel corpus files in one request by repeating the parameter. All\n     * uploaded parallel corpus files combined must contain at least 5000 parallel sentences to train successfully. You\n     * can provide a maximum of 500,000 parallel sentences across all corpora.\n     *\n     * A single entry in a corpus file can contain a maximum of 80 words. All corpora files for a custom model can have a\n     * cumulative maximum size of 250 MB. For more information, see **Supported file formats** in the method description.\n     *\n     * *With `curl`, use `--form parallel_corpus=@{filename}`.*.\n     * @param {string} [params.parallelCorpusContentType] - The content type of parallelCorpus.\n     * @param {string} [params.name] - An optional model name that you can use to identify the model. Valid characters are\n     * letters, numbers, dashes, underscores, spaces, and apostrophes. The maximum length of the name is 32 characters.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationModel>>}\n     */\n    LanguageTranslatorV3.prototype.createModel = function (params) {\n        var _params = __assign({}, params);\n        var _requiredParams = ['baseModelId'];\n        var _validParams = ['baseModelId', 'forcedGlossary', 'forcedGlossaryContentType', 'parallelCorpus', 'parallelCorpusContentType', 'name', 'headers'];\n        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);\n        if (_validationErrors) {\n            return Promise.reject(_validationErrors);\n        }\n        var formData = {\n            'forced_glossary': {\n                data: _params.forcedGlossary,\n                contentType: _params.forcedGlossaryContentType,\n            },\n            'parallel_corpus': {\n                data: _params.parallelCorpus,\n                contentType: _params.parallelCorpusContentType,\n            },\n        };\n        var query = {\n            'version': this.version,\n            'base_model_id': _params.baseModelId,\n            'name': _params.name,\n        };\n        var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'createModel');\n        var parameters = {\n            options: {\n                url: '/v3/models',\n                method: 'POST',\n                qs: query,\n                formData: formData\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'Content-Type': 'multipart/form-data',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    /**\n     * Delete model.\n     *\n     * Deletes a custom translation model.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.modelId - Model ID of the model to delete.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DeleteModelResult>>}\n     */\n    LanguageTranslatorV3.prototype.deleteModel = function (params) {\n        var _params = __assign({}, params);\n        var _requiredParams = ['modelId'];\n        var _validParams = ['modelId', 'headers'];\n        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);\n        if (_validationErrors) {\n            return Promise.reject(_validationErrors);\n        }\n        var query = {\n            'version': this.version,\n        };\n        var path = {\n            'model_id': _params.modelId,\n        };\n        var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'deleteModel');\n        var parameters = {\n            options: {\n                url: '/v3/models/{model_id}',\n                method: 'DELETE',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    /**\n     * Get model details.\n     *\n     * Gets information about a translation model, including training status for custom models. Use this method to poll\n     * the status of your customization request. A successfully completed training request has a status of `available`.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.modelId - Model ID of the model to get.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationModel>>}\n     */\n    LanguageTranslatorV3.prototype.getModel = function (params) {\n        var _params = __assign({}, params);\n        var _requiredParams = ['modelId'];\n        var _validParams = ['modelId', 'headers'];\n        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);\n        if (_validationErrors) {\n            return Promise.reject(_validationErrors);\n        }\n        var query = {\n            'version': this.version,\n        };\n        var path = {\n            'model_id': _params.modelId,\n        };\n        var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'getModel');\n        var parameters = {\n            options: {\n                url: '/v3/models/{model_id}',\n                method: 'GET',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    /*************************\n     * documentTranslation\n     ************************/\n    /**\n     * List documents.\n     *\n     * Lists documents that have been submitted for translation.\n     *\n     * @param {Object} [params] - The parameters to send to the service.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DocumentList>>}\n     */\n    LanguageTranslatorV3.prototype.listDocuments = function (params) {\n        var _params = __assign({}, params);\n        var _requiredParams = [];\n        var _validParams = ['headers'];\n        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);\n        if (_validationErrors) {\n            return Promise.reject(_validationErrors);\n        }\n        var query = {\n            'version': this.version,\n        };\n        var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'listDocuments');\n        var parameters = {\n            options: {\n                url: '/v3/documents',\n                method: 'GET',\n                qs: query,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    /**\n     * Translate document.\n     *\n     * Submit a document for translation. You can submit the document contents in the `file` parameter, or you can specify\n     * a previously submitted document by document ID. The maximum file size for document translation is\n     * * **2 MB** for service instances on the Lite plan\n     * * **20 MB** for service instances on the Standard plan\n     * * **50 MB** for service instances on the Advanced plan\n     * * **150 MB** for service instances on the Premium plan\n     *\n     * You can specify the format of the file to be translated in one of two ways:\n     * * By specifying the appropriate file extension for the format.\n     * * By specifying the content type (MIME type) of the format as the `type` of the `file` parameter.\n     *\n     * In some cases, especially for subtitle file formats, you must use either the file extension or the content type.\n     * For more information about all supported file formats, their file extensions and content types, and how and when to\n     * specify the file extension or content type, see [Supported file\n     * formats](https://cloud.ibm.com/docs/language-translator?topic=language-translator-document-translator-tutorial#supported-file-formats).\n     *\n     *\n     * **Note:** When translating a previously submitted document, the target language must be different from the target\n     * language of the original request when the document was initially submitted.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {NodeJS.ReadableStream | Buffer} params.file - The contents of the source file to translate. The maximum\n     * file size for document translation is\n     * * **2 MB** for service instances on the Lite plan\n     * * **20 MB** for service instances on the Standard plan\n     * * **50 MB** for service instances on the Advanced plan\n     * * **150 MB** for service instances on the Premium plan\n     *\n     * You can specify the format of the file to be translated in one of two ways:\n     * * By specifying the appropriate file extension for the format.\n     * * By specifying the content type (MIME type) of the format as the `type` of the `file` parameter.\n     *\n     * In some cases, especially for subtitle file formats, you must use either the file extension or the content type.\n     *\n     * For more information about all supported file formats, their file extensions and content types, and how and when to\n     * specify the file extension or content type, see [Supported file\n     * formats](https://cloud.ibm.com/docs/language-translator?topic=language-translator-document-translator-tutorial#supported-file-formats).\n     * @param {string} params.filename - The filename for file.\n     * @param {string} [params.fileContentType] - The content type of file.\n     * @param {string} [params.modelId] - The model to use for translation. For example, `en-de` selects the IBM-provided\n     * base model for English-to-German translation. A model ID overrides the `source` and `target` parameters and is\n     * required if you use a custom model. If no model ID is specified, you must specify at least a target language.\n     * @param {string} [params.source] - Language code that specifies the language of the source document. If omitted, the\n     * service derives the source language from the input text. The input must contain sufficient text for the service to\n     * identify the language reliably.\n     * @param {string} [params.target] - Language code that specifies the target language for translation. Required if\n     * model ID is not specified.\n     * @param {string} [params.documentId] - To use a previously submitted document as the source for a new translation,\n     * enter the `document_id` of the document.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DocumentStatus>>}\n     */\n    LanguageTranslatorV3.prototype.translateDocument = function (params) {\n        var _params = __assign({}, params);\n        var _requiredParams = ['file', 'filename'];\n        var _validParams = ['file', 'filename', 'fileContentType', 'modelId', 'source', 'target', 'documentId', 'headers'];\n        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);\n        if (_validationErrors) {\n            return Promise.reject(_validationErrors);\n        }\n        var formData = {\n            'file': {\n                data: _params.file,\n                filename: _params.filename,\n                contentType: _params.fileContentType,\n            },\n            'model_id': _params.modelId,\n            'source': _params.source,\n            'target': _params.target,\n            'document_id': _params.documentId,\n        };\n        var query = {\n            'version': this.version,\n        };\n        var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'translateDocument');\n        var parameters = {\n            options: {\n                url: '/v3/documents',\n                method: 'POST',\n                qs: query,\n                formData: formData\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'Content-Type': 'multipart/form-data',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    /**\n     * Get document status.\n     *\n     * Gets the translation status of a document.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.documentId - The document ID of the document.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DocumentStatus>>}\n     */\n    LanguageTranslatorV3.prototype.getDocumentStatus = function (params) {\n        var _params = __assign({}, params);\n        var _requiredParams = ['documentId'];\n        var _validParams = ['documentId', 'headers'];\n        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);\n        if (_validationErrors) {\n            return Promise.reject(_validationErrors);\n        }\n        var query = {\n            'version': this.version,\n        };\n        var path = {\n            'document_id': _params.documentId,\n        };\n        var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'getDocumentStatus');\n        var parameters = {\n            options: {\n                url: '/v3/documents/{document_id}',\n                method: 'GET',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    /**\n     * Delete document.\n     *\n     * Deletes a document.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.documentId - Document ID of the document to delete.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.EmptyObject>>}\n     */\n    LanguageTranslatorV3.prototype.deleteDocument = function (params) {\n        var _params = __assign({}, params);\n        var _requiredParams = ['documentId'];\n        var _validParams = ['documentId', 'headers'];\n        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);\n        if (_validationErrors) {\n            return Promise.reject(_validationErrors);\n        }\n        var query = {\n            'version': this.version,\n        };\n        var path = {\n            'document_id': _params.documentId,\n        };\n        var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'deleteDocument');\n        var parameters = {\n            options: {\n                url: '/v3/documents/{document_id}',\n                method: 'DELETE',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {}, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    /**\n     * Get translated document.\n     *\n     * Gets the translated document associated with the given document ID.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.documentId - The document ID of the document that was submitted for translation.\n     * @param {string} [params.accept] - The type of the response: application/powerpoint, application/mspowerpoint,\n     * application/x-rtf, application/json, application/xml, application/vnd.ms-excel,\n     * application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-powerpoint,\n     * application/vnd.openxmlformats-officedocument.presentationml.presentation, application/msword,\n     * application/vnd.openxmlformats-officedocument.wordprocessingml.document,\n     * application/vnd.oasis.opendocument.spreadsheet, application/vnd.oasis.opendocument.presentation,\n     * application/vnd.oasis.opendocument.text, application/pdf, application/rtf, text/html, text/json, text/plain,\n     * text/richtext, text/rtf, or text/xml. A character encoding can be specified by including a `charset` parameter. For\n     * example, 'text/html;charset=utf-8'.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<LanguageTranslatorV3.Response<NodeJS.ReadableStream>>}\n     */\n    LanguageTranslatorV3.prototype.getTranslatedDocument = function (params) {\n        var _params = __assign({}, params);\n        var _requiredParams = ['documentId'];\n        var _validParams = ['documentId', 'accept', 'headers'];\n        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);\n        if (_validationErrors) {\n            return Promise.reject(_validationErrors);\n        }\n        var query = {\n            'version': this.version,\n        };\n        var path = {\n            'document_id': _params.documentId,\n        };\n        var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'getTranslatedDocument');\n        var parameters = {\n            options: {\n                url: '/v3/documents/{document_id}/translated_document',\n                method: 'GET',\n                qs: query,\n                path: path,\n                responseType: 'stream',\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': _params.accept,\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    LanguageTranslatorV3.DEFAULT_SERVICE_URL = 'https://api.us-south.language-translator.watson.cloud.ibm.com';\n    LanguageTranslatorV3.DEFAULT_SERVICE_NAME = 'language_translator';\n    return LanguageTranslatorV3;\n}(ibm_cloud_sdk_core_1.BaseService));\n/*************************\n * interfaces\n ************************/\n(function (LanguageTranslatorV3) {\n    /** Constants for the `createModel` operation. */\n    var CreateModelConstants;\n    (function (CreateModelConstants) {\n        /** The content type of forcedGlossary. */\n        var ForcedGlossaryContentType;\n        (function (ForcedGlossaryContentType) {\n            ForcedGlossaryContentType[\"APPLICATION_X_TMX_XML\"] = \"application/x-tmx+xml\";\n            ForcedGlossaryContentType[\"APPLICATION_XLIFF_XML\"] = \"application/xliff+xml\";\n            ForcedGlossaryContentType[\"TEXT_CSV\"] = \"text/csv\";\n            ForcedGlossaryContentType[\"TEXT_TAB_SEPARATED_VALUES\"] = \"text/tab-separated-values\";\n            ForcedGlossaryContentType[\"APPLICATION_JSON\"] = \"application/json\";\n            ForcedGlossaryContentType[\"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET\"] = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n        })(ForcedGlossaryContentType = CreateModelConstants.ForcedGlossaryContentType || (CreateModelConstants.ForcedGlossaryContentType = {}));\n        /** The content type of parallelCorpus. */\n        var ParallelCorpusContentType;\n        (function (ParallelCorpusContentType) {\n            ParallelCorpusContentType[\"APPLICATION_X_TMX_XML\"] = \"application/x-tmx+xml\";\n            ParallelCorpusContentType[\"APPLICATION_XLIFF_XML\"] = \"application/xliff+xml\";\n            ParallelCorpusContentType[\"TEXT_CSV\"] = \"text/csv\";\n            ParallelCorpusContentType[\"TEXT_TAB_SEPARATED_VALUES\"] = \"text/tab-separated-values\";\n            ParallelCorpusContentType[\"APPLICATION_JSON\"] = \"application/json\";\n            ParallelCorpusContentType[\"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET\"] = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n        })(ParallelCorpusContentType = CreateModelConstants.ParallelCorpusContentType || (CreateModelConstants.ParallelCorpusContentType = {}));\n    })(CreateModelConstants = LanguageTranslatorV3.CreateModelConstants || (LanguageTranslatorV3.CreateModelConstants = {}));\n    /** Constants for the `translateDocument` operation. */\n    var TranslateDocumentConstants;\n    (function (TranslateDocumentConstants) {\n        /** The content type of file. */\n        var FileContentType;\n        (function (FileContentType) {\n            FileContentType[\"APPLICATION_MSPOWERPOINT\"] = \"application/mspowerpoint\";\n            FileContentType[\"APPLICATION_MSWORD\"] = \"application/msword\";\n            FileContentType[\"APPLICATION_OCTET_STREAM\"] = \"application/octet-stream\";\n            FileContentType[\"APPLICATION_PDF\"] = \"application/pdf\";\n            FileContentType[\"APPLICATION_POWERPOINT\"] = \"application/powerpoint\";\n            FileContentType[\"APPLICATION_RTF\"] = \"application/rtf\";\n            FileContentType[\"APPLICATION_TTAF_XML\"] = \"application/ttaf+xml\";\n            FileContentType[\"APPLICATION_TTML_XML\"] = \"application/ttml+xml\";\n            FileContentType[\"APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION\"] = \"application/vnd.oasis.opendocument.presentation\";\n            FileContentType[\"APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET\"] = \"application/vnd.oasis.opendocument.spreadsheet\";\n            FileContentType[\"APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT\"] = \"application/vnd.oasis.opendocument.text\";\n            FileContentType[\"APPLICATION_VND_MS_EXCEL\"] = \"application/vnd.ms-excel\";\n            FileContentType[\"APPLICATION_VND_MS_POWERPOINT\"] = \"application/vnd.ms-powerpoint\";\n            FileContentType[\"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION\"] = \"application/vnd.openxmlformats-officedocument.presentationml.presentation\";\n            FileContentType[\"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET\"] = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n            FileContentType[\"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT\"] = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\";\n            FileContentType[\"APPLICATION_X_RTF\"] = \"application/x-rtf\";\n            FileContentType[\"APPLICATION_XHTML_XML\"] = \"application/xhtml+xml\";\n            FileContentType[\"APPLICATION_XML\"] = \"application/xml\";\n            FileContentType[\"TEXT_HTML\"] = \"text/html\";\n            FileContentType[\"TEXT_JSON\"] = \"text/json\";\n            FileContentType[\"TEXT_PLAIN\"] = \"text/plain\";\n            FileContentType[\"TEXT_RICHTEXT\"] = \"text/richtext\";\n            FileContentType[\"TEXT_RTF\"] = \"text/rtf\";\n            FileContentType[\"TEXT_SBV\"] = \"text/sbv\";\n            FileContentType[\"TEXT_SRT\"] = \"text/srt\";\n            FileContentType[\"TEXT_XML\"] = \"text/xml\";\n        })(FileContentType = TranslateDocumentConstants.FileContentType || (TranslateDocumentConstants.FileContentType = {}));\n    })(TranslateDocumentConstants = LanguageTranslatorV3.TranslateDocumentConstants || (LanguageTranslatorV3.TranslateDocumentConstants = {}));\n    /** Constants for the `getTranslatedDocument` operation. */\n    var GetTranslatedDocumentConstants;\n    (function (GetTranslatedDocumentConstants) {\n        /** The type of the response: application/powerpoint, application/mspowerpoint, application/x-rtf, application/json, application/xml, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.oasis.opendocument.spreadsheet, application/vnd.oasis.opendocument.presentation, application/vnd.oasis.opendocument.text, application/pdf, application/rtf, text/html, text/json, text/plain, text/richtext, text/rtf, or text/xml. A character encoding can be specified by including a `charset` parameter. For example, 'text/html;charset=utf-8'. */\n        var Accept;\n        (function (Accept) {\n            Accept[\"APPLICATION_POWERPOINT\"] = \"application/powerpoint\";\n            Accept[\"APPLICATION_MSPOWERPOINT\"] = \"application/mspowerpoint\";\n            Accept[\"APPLICATION_X_RTF\"] = \"application/x-rtf\";\n            Accept[\"APPLICATION_JSON\"] = \"application/json\";\n            Accept[\"APPLICATION_XML\"] = \"application/xml\";\n            Accept[\"APPLICATION_VND_MS_EXCEL\"] = \"application/vnd.ms-excel\";\n            Accept[\"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET\"] = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n            Accept[\"APPLICATION_VND_MS_POWERPOINT\"] = \"application/vnd.ms-powerpoint\";\n            Accept[\"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION\"] = \"application/vnd.openxmlformats-officedocument.presentationml.presentation\";\n            Accept[\"APPLICATION_MSWORD\"] = \"application/msword\";\n            Accept[\"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT\"] = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\";\n            Accept[\"APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET\"] = \"application/vnd.oasis.opendocument.spreadsheet\";\n            Accept[\"APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION\"] = \"application/vnd.oasis.opendocument.presentation\";\n            Accept[\"APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT\"] = \"application/vnd.oasis.opendocument.text\";\n            Accept[\"APPLICATION_PDF\"] = \"application/pdf\";\n            Accept[\"APPLICATION_RTF\"] = \"application/rtf\";\n            Accept[\"TEXT_HTML\"] = \"text/html\";\n            Accept[\"TEXT_JSON\"] = \"text/json\";\n            Accept[\"TEXT_PLAIN\"] = \"text/plain\";\n            Accept[\"TEXT_RICHTEXT\"] = \"text/richtext\";\n            Accept[\"TEXT_RTF\"] = \"text/rtf\";\n            Accept[\"TEXT_XML\"] = \"text/xml\";\n        })(Accept = GetTranslatedDocumentConstants.Accept || (GetTranslatedDocumentConstants.Accept = {}));\n    })(GetTranslatedDocumentConstants = LanguageTranslatorV3.GetTranslatedDocumentConstants || (LanguageTranslatorV3.GetTranslatedDocumentConstants = {}));\n})(LanguageTranslatorV3 || (LanguageTranslatorV3 = {}));\nmodule.exports = LanguageTranslatorV3;\n"],
  "mappings": "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",
  "names": ["d", "b", "LanguageTranslatorV3", "CreateModelConstants", "ForcedGlossaryContentType", "ParallelCorpusContentType", "TranslateDocumentConstants", "FileContentType", "GetTranslatedDocumentConstants", "Accept"]
}
