import {
  require_extend,
  require_ibm_cloud_sdk_core,
  require_os
} from "./chunk-5M4SSXNB.js";
import "./chunk-QHVSEEMJ.js";
import {
  __commonJS
} from "./chunk-A7MDENZS.js";

// node_modules/ibm-watson/package.json
var require_package = __commonJS({
  "node_modules/ibm-watson/package.json"(exports, module) {
    module.exports = {
      name: "ibm-watson",
      version: "8.0.0",
      description: "Client library to use the IBM Watson Services",
      repository: {
        type: "git",
        url: "https://github.com/watson-developer-cloud/node-sdk.git"
      },
      keywords: [
        "assistant",
        "compare comply",
        "discovery",
        "ibm",
        "natural language classifier",
        "natural language understanding",
        "personality insights",
        "speech to text",
        "text to speech",
        "tone analyzer",
        "tone_analyzer",
        "visual recognition",
        "watson developer cloud",
        "watson",
        "wdc"
      ],
      author: "IBM Corp.",
      contributors: [
        {
          name: "German Attanasio Ruiz",
          email: "germanatt@us.ibm.com"
        },
        {
          name: "Nathan Friedly",
          email: "nfriedly@us.ibm.com"
        },
        {
          name: "Jeff Stylos",
          email: "jsstylos@us.ibm.com"
        },
        {
          name: "Dustin Popp",
          email: "dustinpopp@ibm.com"
        },
        {
          name: "Angelo Paparazzi",
          email: "angelo.paparazzi@ibm.com"
        }
      ],
      license: "Apache-2.0",
      bugs: {
        url: "https://github.com/watson-developer-cloud/node-sdk/issues"
      },
      dependencies: {
        "@types/async": "^3.2.5",
        "@types/extend": "^3.0.1",
        "@types/isstream": "^0.1.0",
        "@types/node": "^13.13.39",
        "@types/websocket": "^1.0.1",
        async: "^3.2.0",
        camelcase: "^6.2.0",
        extend: "~3.0.2",
        "ibm-cloud-sdk-core": "^4.0.3",
        isstream: "~0.1.2",
        websocket: "^1.0.33"
      },
      engines: {
        node: ">=16.0.0"
      },
      scripts: {
        "tslint:config": "tslint-config-prettier-check ./tslint.json",
        "tslint:fix": "tslint --fix -p . -c tslint.json",
        "tslint:check": "tslint -p . -c ./tslint.json",
        "eslint:config": "eslint --print-config .eslintrc.js | eslint-config-prettier-check",
        "eslint:fix": "eslint . --fix",
        "eslint:check": "eslint . --cache",
        lint: "npm run eslint:check && npm run tslint:check",
        build: "tsc && cp package.json dist/",
        doc: "jsdoc -c scripts/jsdoc/config.json",
        "tsc-publish-dry": "tsc-publish --no-checks --dry-run",
        postversion: "npm run tsc-publish-dry",
        "test-integration": "jest test/integration",
        "test-unit": "jest test/unit/",
        test: "jest test/",
        "test-unit-travis": "jest --silent --runInBand test/unit/",
        "test-integration-travis": "jest --silent --runInBand --no-colors --testNamePattern='^((?!@slow).)*$' --json test/integration > test-output.log",
        "report-coverage": "codecov",
        "watch-doc": "nodemon --watch ./ --ext js,tmpl,json --ignore dist/ --ignore doc/ --ignore test/ --ignore examples/ --exec npm run doc",
        watch: "npm run test-unit -- --watch",
        "check-packages": "installed-check -e -d",
        "snyk-protect": "snyk protect",
        prettier: 'prettier --write "{src,test}/**/*.js"'
      },
      husky: {
        hooks: {
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      jest: {
        collectCoverage: true,
        coverageDirectory: "./coverage/",
        testEnvironment: "node"
      },
      commitlint: {
        rules: {
          "body-leading-blank": [
            1,
            "always"
          ],
          "footer-leading-blank": [
            1,
            "always"
          ],
          "header-max-length": [
            2,
            "always",
            72
          ],
          "scope-case": [
            2,
            "always",
            "lower-case"
          ],
          "subject-case": [
            2,
            "never",
            [
              "sentence-case",
              "start-case",
              "pascal-case",
              "upper-case"
            ]
          ],
          "subject-empty": [
            2,
            "never"
          ],
          "subject-full-stop": [
            2,
            "never",
            "."
          ],
          "type-case": [
            2,
            "always",
            "lower-case"
          ],
          "type-empty": [
            2,
            "never"
          ],
          "type-enum": [
            2,
            "always",
            [
              "build",
              "chore",
              "ci",
              "docs",
              "feat",
              "fix",
              "perf",
              "refactor",
              "revert",
              "style",
              "test"
            ]
          ]
        }
      },
      snyk: true,
      config: {
        commitizen: {
          path: "./node_modules/cz-conventional-changelog"
        }
      }
    };
  }
});

// node_modules/ibm-watson/lib/common.js
var require_common = __commonJS({
  "node_modules/ibm-watson/lib/common.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSdkHeaders = void 0;
    var os = require_os();
    var pkg = require_package();
    function getSdkHeaders(serviceName, serviceVersion, operationId) {
      var isBrowser = typeof window !== "undefined";
      if (isBrowser) {
        return {};
      }
      var sdkName = "watson-apis-node-sdk";
      var sdkVersion = pkg.version;
      var osName = os.platform();
      var osVersion = os.release();
      var nodeVersion = process.version;
      var headers = {
        "User-Agent": "".concat(sdkName, "-").concat(sdkVersion, " ").concat(osName, " ").concat(osVersion, " ").concat(nodeVersion),
        "X-IBMCloud-SDK-Analytics": "service_name=".concat(serviceName, ";service_version=").concat(serviceVersion, ";operation_id=").concat(operationId, ";async=true")
      };
      return headers;
    }
    exports.getSdkHeaders = getSdkHeaders;
  }
});

// node_modules/ibm-watson/language-translator/v3.js
var require_v3 = __commonJS({
  "node_modules/ibm-watson/language-translator/v3.js"(exports, module) {
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var extend = require_extend();
    var ibm_cloud_sdk_core_1 = require_ibm_cloud_sdk_core();
    var common_1 = require_common();
    var LanguageTranslatorV3 = (
      /** @class */
      function(_super) {
        __extends(LanguageTranslatorV32, _super);
        function LanguageTranslatorV32(options) {
          var _this = this;
          options = options || {};
          var _requiredParams = ["version"];
          var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(options, _requiredParams, null);
          if (_validationErrors) {
            throw _validationErrors;
          }
          if (!options.serviceName) {
            options.serviceName = LanguageTranslatorV32.DEFAULT_SERVICE_NAME;
          }
          if (!options.authenticator) {
            options.authenticator = (0, ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment)(options.serviceName);
          }
          _this = _super.call(this, options) || this;
          _this.configureService(options.serviceName);
          if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
          }
          _this.version = options.version;
          return _this;
        }
        LanguageTranslatorV32.prototype.listLanguages = function(params) {
          var _params = __assign({}, params);
          var _requiredParams = [];
          var _validParams = ["headers"];
          var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
          if (_validationErrors) {
            return Promise.reject(_validationErrors);
          }
          var query = {
            "version": this.version
          };
          var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV32.DEFAULT_SERVICE_NAME, "v3", "listLanguages");
          var parameters = {
            options: {
              url: "/v3/languages",
              method: "GET",
              qs: query
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
              headers: extend(true, sdkHeaders, {
                "Accept": "application/json"
              }, _params.headers)
            })
          };
          return this.createRequest(parameters);
        };
        LanguageTranslatorV32.prototype.translate = function(params) {
          var _params = __assign({}, params);
          var _requiredParams = ["text"];
          var _validParams = ["text", "modelId", "source", "target", "headers"];
          var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
          if (_validationErrors) {
            return Promise.reject(_validationErrors);
          }
          var body = {
            "text": _params.text,
            "model_id": _params.modelId,
            "source": _params.source,
            "target": _params.target
          };
          var query = {
            "version": this.version
          };
          var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV32.DEFAULT_SERVICE_NAME, "v3", "translate");
          var parameters = {
            options: {
              url: "/v3/translate",
              method: "POST",
              body,
              qs: query
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
              headers: extend(true, sdkHeaders, {
                "Accept": "application/json",
                "Content-Type": "application/json"
              }, _params.headers)
            })
          };
          return this.createRequest(parameters);
        };
        LanguageTranslatorV32.prototype.listIdentifiableLanguages = function(params) {
          var _params = __assign({}, params);
          var _requiredParams = [];
          var _validParams = ["headers"];
          var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
          if (_validationErrors) {
            return Promise.reject(_validationErrors);
          }
          var query = {
            "version": this.version
          };
          var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV32.DEFAULT_SERVICE_NAME, "v3", "listIdentifiableLanguages");
          var parameters = {
            options: {
              url: "/v3/identifiable_languages",
              method: "GET",
              qs: query
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
              headers: extend(true, sdkHeaders, {
                "Accept": "application/json"
              }, _params.headers)
            })
          };
          return this.createRequest(parameters);
        };
        LanguageTranslatorV32.prototype.identify = function(params) {
          var _params = __assign({}, params);
          var _requiredParams = ["text"];
          var _validParams = ["text", "headers"];
          var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
          if (_validationErrors) {
            return Promise.reject(_validationErrors);
          }
          var body = _params.text;
          var query = {
            "version": this.version
          };
          var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV32.DEFAULT_SERVICE_NAME, "v3", "identify");
          var parameters = {
            options: {
              url: "/v3/identify",
              method: "POST",
              body,
              qs: query
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
              headers: extend(true, sdkHeaders, {
                "Accept": "application/json",
                "Content-Type": "text/plain"
              }, _params.headers)
            })
          };
          return this.createRequest(parameters);
        };
        LanguageTranslatorV32.prototype.listModels = function(params) {
          var _params = __assign({}, params);
          var _requiredParams = [];
          var _validParams = ["source", "target", "_default", "headers"];
          var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
          if (_validationErrors) {
            return Promise.reject(_validationErrors);
          }
          var query = {
            "version": this.version,
            "source": _params.source,
            "target": _params.target,
            "default": _params._default
          };
          var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV32.DEFAULT_SERVICE_NAME, "v3", "listModels");
          var parameters = {
            options: {
              url: "/v3/models",
              method: "GET",
              qs: query
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
              headers: extend(true, sdkHeaders, {
                "Accept": "application/json"
              }, _params.headers)
            })
          };
          return this.createRequest(parameters);
        };
        LanguageTranslatorV32.prototype.createModel = function(params) {
          var _params = __assign({}, params);
          var _requiredParams = ["baseModelId"];
          var _validParams = ["baseModelId", "forcedGlossary", "forcedGlossaryContentType", "parallelCorpus", "parallelCorpusContentType", "name", "headers"];
          var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
          if (_validationErrors) {
            return Promise.reject(_validationErrors);
          }
          var formData = {
            "forced_glossary": {
              data: _params.forcedGlossary,
              contentType: _params.forcedGlossaryContentType
            },
            "parallel_corpus": {
              data: _params.parallelCorpus,
              contentType: _params.parallelCorpusContentType
            }
          };
          var query = {
            "version": this.version,
            "base_model_id": _params.baseModelId,
            "name": _params.name
          };
          var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV32.DEFAULT_SERVICE_NAME, "v3", "createModel");
          var parameters = {
            options: {
              url: "/v3/models",
              method: "POST",
              qs: query,
              formData
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
              headers: extend(true, sdkHeaders, {
                "Accept": "application/json",
                "Content-Type": "multipart/form-data"
              }, _params.headers)
            })
          };
          return this.createRequest(parameters);
        };
        LanguageTranslatorV32.prototype.deleteModel = function(params) {
          var _params = __assign({}, params);
          var _requiredParams = ["modelId"];
          var _validParams = ["modelId", "headers"];
          var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
          if (_validationErrors) {
            return Promise.reject(_validationErrors);
          }
          var query = {
            "version": this.version
          };
          var path = {
            "model_id": _params.modelId
          };
          var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV32.DEFAULT_SERVICE_NAME, "v3", "deleteModel");
          var parameters = {
            options: {
              url: "/v3/models/{model_id}",
              method: "DELETE",
              qs: query,
              path
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
              headers: extend(true, sdkHeaders, {
                "Accept": "application/json"
              }, _params.headers)
            })
          };
          return this.createRequest(parameters);
        };
        LanguageTranslatorV32.prototype.getModel = function(params) {
          var _params = __assign({}, params);
          var _requiredParams = ["modelId"];
          var _validParams = ["modelId", "headers"];
          var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
          if (_validationErrors) {
            return Promise.reject(_validationErrors);
          }
          var query = {
            "version": this.version
          };
          var path = {
            "model_id": _params.modelId
          };
          var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV32.DEFAULT_SERVICE_NAME, "v3", "getModel");
          var parameters = {
            options: {
              url: "/v3/models/{model_id}",
              method: "GET",
              qs: query,
              path
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
              headers: extend(true, sdkHeaders, {
                "Accept": "application/json"
              }, _params.headers)
            })
          };
          return this.createRequest(parameters);
        };
        LanguageTranslatorV32.prototype.listDocuments = function(params) {
          var _params = __assign({}, params);
          var _requiredParams = [];
          var _validParams = ["headers"];
          var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
          if (_validationErrors) {
            return Promise.reject(_validationErrors);
          }
          var query = {
            "version": this.version
          };
          var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV32.DEFAULT_SERVICE_NAME, "v3", "listDocuments");
          var parameters = {
            options: {
              url: "/v3/documents",
              method: "GET",
              qs: query
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
              headers: extend(true, sdkHeaders, {
                "Accept": "application/json"
              }, _params.headers)
            })
          };
          return this.createRequest(parameters);
        };
        LanguageTranslatorV32.prototype.translateDocument = function(params) {
          var _params = __assign({}, params);
          var _requiredParams = ["file", "filename"];
          var _validParams = ["file", "filename", "fileContentType", "modelId", "source", "target", "documentId", "headers"];
          var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
          if (_validationErrors) {
            return Promise.reject(_validationErrors);
          }
          var formData = {
            "file": {
              data: _params.file,
              filename: _params.filename,
              contentType: _params.fileContentType
            },
            "model_id": _params.modelId,
            "source": _params.source,
            "target": _params.target,
            "document_id": _params.documentId
          };
          var query = {
            "version": this.version
          };
          var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV32.DEFAULT_SERVICE_NAME, "v3", "translateDocument");
          var parameters = {
            options: {
              url: "/v3/documents",
              method: "POST",
              qs: query,
              formData
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
              headers: extend(true, sdkHeaders, {
                "Accept": "application/json",
                "Content-Type": "multipart/form-data"
              }, _params.headers)
            })
          };
          return this.createRequest(parameters);
        };
        LanguageTranslatorV32.prototype.getDocumentStatus = function(params) {
          var _params = __assign({}, params);
          var _requiredParams = ["documentId"];
          var _validParams = ["documentId", "headers"];
          var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
          if (_validationErrors) {
            return Promise.reject(_validationErrors);
          }
          var query = {
            "version": this.version
          };
          var path = {
            "document_id": _params.documentId
          };
          var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV32.DEFAULT_SERVICE_NAME, "v3", "getDocumentStatus");
          var parameters = {
            options: {
              url: "/v3/documents/{document_id}",
              method: "GET",
              qs: query,
              path
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
              headers: extend(true, sdkHeaders, {
                "Accept": "application/json"
              }, _params.headers)
            })
          };
          return this.createRequest(parameters);
        };
        LanguageTranslatorV32.prototype.deleteDocument = function(params) {
          var _params = __assign({}, params);
          var _requiredParams = ["documentId"];
          var _validParams = ["documentId", "headers"];
          var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
          if (_validationErrors) {
            return Promise.reject(_validationErrors);
          }
          var query = {
            "version": this.version
          };
          var path = {
            "document_id": _params.documentId
          };
          var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV32.DEFAULT_SERVICE_NAME, "v3", "deleteDocument");
          var parameters = {
            options: {
              url: "/v3/documents/{document_id}",
              method: "DELETE",
              qs: query,
              path
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
              headers: extend(true, sdkHeaders, {}, _params.headers)
            })
          };
          return this.createRequest(parameters);
        };
        LanguageTranslatorV32.prototype.getTranslatedDocument = function(params) {
          var _params = __assign({}, params);
          var _requiredParams = ["documentId"];
          var _validParams = ["documentId", "accept", "headers"];
          var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
          if (_validationErrors) {
            return Promise.reject(_validationErrors);
          }
          var query = {
            "version": this.version
          };
          var path = {
            "document_id": _params.documentId
          };
          var sdkHeaders = (0, common_1.getSdkHeaders)(LanguageTranslatorV32.DEFAULT_SERVICE_NAME, "v3", "getTranslatedDocument");
          var parameters = {
            options: {
              url: "/v3/documents/{document_id}/translated_document",
              method: "GET",
              qs: query,
              path,
              responseType: "stream"
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
              headers: extend(true, sdkHeaders, {
                "Accept": _params.accept
              }, _params.headers)
            })
          };
          return this.createRequest(parameters);
        };
        LanguageTranslatorV32.DEFAULT_SERVICE_URL = "https://api.us-south.language-translator.watson.cloud.ibm.com";
        LanguageTranslatorV32.DEFAULT_SERVICE_NAME = "language_translator";
        return LanguageTranslatorV32;
      }(ibm_cloud_sdk_core_1.BaseService)
    );
    (function(LanguageTranslatorV32) {
      var CreateModelConstants;
      (function(CreateModelConstants2) {
        var ForcedGlossaryContentType;
        (function(ForcedGlossaryContentType2) {
          ForcedGlossaryContentType2["APPLICATION_X_TMX_XML"] = "application/x-tmx+xml";
          ForcedGlossaryContentType2["APPLICATION_XLIFF_XML"] = "application/xliff+xml";
          ForcedGlossaryContentType2["TEXT_CSV"] = "text/csv";
          ForcedGlossaryContentType2["TEXT_TAB_SEPARATED_VALUES"] = "text/tab-separated-values";
          ForcedGlossaryContentType2["APPLICATION_JSON"] = "application/json";
          ForcedGlossaryContentType2["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        })(ForcedGlossaryContentType = CreateModelConstants2.ForcedGlossaryContentType || (CreateModelConstants2.ForcedGlossaryContentType = {}));
        var ParallelCorpusContentType;
        (function(ParallelCorpusContentType2) {
          ParallelCorpusContentType2["APPLICATION_X_TMX_XML"] = "application/x-tmx+xml";
          ParallelCorpusContentType2["APPLICATION_XLIFF_XML"] = "application/xliff+xml";
          ParallelCorpusContentType2["TEXT_CSV"] = "text/csv";
          ParallelCorpusContentType2["TEXT_TAB_SEPARATED_VALUES"] = "text/tab-separated-values";
          ParallelCorpusContentType2["APPLICATION_JSON"] = "application/json";
          ParallelCorpusContentType2["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        })(ParallelCorpusContentType = CreateModelConstants2.ParallelCorpusContentType || (CreateModelConstants2.ParallelCorpusContentType = {}));
      })(CreateModelConstants = LanguageTranslatorV32.CreateModelConstants || (LanguageTranslatorV32.CreateModelConstants = {}));
      var TranslateDocumentConstants;
      (function(TranslateDocumentConstants2) {
        var FileContentType;
        (function(FileContentType2) {
          FileContentType2["APPLICATION_MSPOWERPOINT"] = "application/mspowerpoint";
          FileContentType2["APPLICATION_MSWORD"] = "application/msword";
          FileContentType2["APPLICATION_OCTET_STREAM"] = "application/octet-stream";
          FileContentType2["APPLICATION_PDF"] = "application/pdf";
          FileContentType2["APPLICATION_POWERPOINT"] = "application/powerpoint";
          FileContentType2["APPLICATION_RTF"] = "application/rtf";
          FileContentType2["APPLICATION_TTAF_XML"] = "application/ttaf+xml";
          FileContentType2["APPLICATION_TTML_XML"] = "application/ttml+xml";
          FileContentType2["APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION"] = "application/vnd.oasis.opendocument.presentation";
          FileContentType2["APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET"] = "application/vnd.oasis.opendocument.spreadsheet";
          FileContentType2["APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT"] = "application/vnd.oasis.opendocument.text";
          FileContentType2["APPLICATION_VND_MS_EXCEL"] = "application/vnd.ms-excel";
          FileContentType2["APPLICATION_VND_MS_POWERPOINT"] = "application/vnd.ms-powerpoint";
          FileContentType2["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION"] = "application/vnd.openxmlformats-officedocument.presentationml.presentation";
          FileContentType2["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
          FileContentType2["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT"] = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
          FileContentType2["APPLICATION_X_RTF"] = "application/x-rtf";
          FileContentType2["APPLICATION_XHTML_XML"] = "application/xhtml+xml";
          FileContentType2["APPLICATION_XML"] = "application/xml";
          FileContentType2["TEXT_HTML"] = "text/html";
          FileContentType2["TEXT_JSON"] = "text/json";
          FileContentType2["TEXT_PLAIN"] = "text/plain";
          FileContentType2["TEXT_RICHTEXT"] = "text/richtext";
          FileContentType2["TEXT_RTF"] = "text/rtf";
          FileContentType2["TEXT_SBV"] = "text/sbv";
          FileContentType2["TEXT_SRT"] = "text/srt";
          FileContentType2["TEXT_XML"] = "text/xml";
        })(FileContentType = TranslateDocumentConstants2.FileContentType || (TranslateDocumentConstants2.FileContentType = {}));
      })(TranslateDocumentConstants = LanguageTranslatorV32.TranslateDocumentConstants || (LanguageTranslatorV32.TranslateDocumentConstants = {}));
      var GetTranslatedDocumentConstants;
      (function(GetTranslatedDocumentConstants2) {
        var Accept;
        (function(Accept2) {
          Accept2["APPLICATION_POWERPOINT"] = "application/powerpoint";
          Accept2["APPLICATION_MSPOWERPOINT"] = "application/mspowerpoint";
          Accept2["APPLICATION_X_RTF"] = "application/x-rtf";
          Accept2["APPLICATION_JSON"] = "application/json";
          Accept2["APPLICATION_XML"] = "application/xml";
          Accept2["APPLICATION_VND_MS_EXCEL"] = "application/vnd.ms-excel";
          Accept2["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
          Accept2["APPLICATION_VND_MS_POWERPOINT"] = "application/vnd.ms-powerpoint";
          Accept2["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION"] = "application/vnd.openxmlformats-officedocument.presentationml.presentation";
          Accept2["APPLICATION_MSWORD"] = "application/msword";
          Accept2["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT"] = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
          Accept2["APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET"] = "application/vnd.oasis.opendocument.spreadsheet";
          Accept2["APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION"] = "application/vnd.oasis.opendocument.presentation";
          Accept2["APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT"] = "application/vnd.oasis.opendocument.text";
          Accept2["APPLICATION_PDF"] = "application/pdf";
          Accept2["APPLICATION_RTF"] = "application/rtf";
          Accept2["TEXT_HTML"] = "text/html";
          Accept2["TEXT_JSON"] = "text/json";
          Accept2["TEXT_PLAIN"] = "text/plain";
          Accept2["TEXT_RICHTEXT"] = "text/richtext";
          Accept2["TEXT_RTF"] = "text/rtf";
          Accept2["TEXT_XML"] = "text/xml";
        })(Accept = GetTranslatedDocumentConstants2.Accept || (GetTranslatedDocumentConstants2.Accept = {}));
      })(GetTranslatedDocumentConstants = LanguageTranslatorV32.GetTranslatedDocumentConstants || (LanguageTranslatorV32.GetTranslatedDocumentConstants = {}));
    })(LanguageTranslatorV3 || (LanguageTranslatorV3 = {}));
    module.exports = LanguageTranslatorV3;
  }
});
export default require_v3();
//# sourceMappingURL=ibm-watson_language-translator_v3.js.map
